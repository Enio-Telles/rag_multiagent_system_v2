#!/usr/bin/env python3
"""
Teste final para verificar se todos os problemas da interface foram corrigidos
"""

import sys
import os
import json
import requests
from pathlib import Path

# Adicionar o diret√≥rio raiz do projeto ao path
project_root = Path(__file__).parent.absolute()
sys.path.insert(0, str(project_root))

def test_api_issues():
    """Testa se todos os 4 problemas reportados foram corrigidos"""
    base_url = "http://127.0.0.1:8000"
    
    print("=== Teste Final - Verifica√ß√£o dos Problemas Corrigidos ===\n")
    
    # 1. Teste de listagem de classifica√ß√µes (deve incluir todos os campos necess√°rios)
    print("1. üîç Testando listagem de classifica√ß√µes...")
    try:
        response = requests.get(f"{base_url}/api/v1/classificacoes", params={"limit": 1})
        
        if response.status_code == 200:
            data = response.json()
            if data and len(data) > 0:
                item = data[0]
                
                # Verificar se inclui justificativa_sistema
                if "justificativa_sistema" in item:
                    print("   ‚úÖ Campo 'justificativa_sistema' presente")
                else:
                    print("   ‚ùå Campo 'justificativa_sistema' ausente")
                
                # Verificar se inclui codigo_barra
                if "codigo_barra" in item:
                    print("   ‚úÖ Campo 'codigo_barra' presente")
                else:
                    print("   ‚ùå Campo 'codigo_barra' ausente")
                
                # Verificar se inclui campos originais
                if "ncm_original" in item and "cest_original" in item:
                    print("   ‚úÖ Campos 'ncm_original' e 'cest_original' presentes")
                else:
                    print("   ‚ùå Campos originais ausentes")
                    
                print(f"   üìã Exemplo de item: {json.dumps(item, indent=2, default=str)[:200]}...")
            else:
                print("   ‚ö†Ô∏è  Nenhum dado retornado")
        else:
            print(f"   ‚ùå Erro na requisi√ß√£o: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erro na conex√£o: {e}")
    
    print()
    
    # 2. Teste do endpoint de pr√≥ximo produto (problema 3 - navega√ß√£o)
    print("2. ‚û°Ô∏è  Testando endpoint de pr√≥ximo produto...")
    try:
        response = requests.get(f"{base_url}/api/v1/classificacoes/proximo-pendente")
        
        if response.status_code == 200:
            data = response.json()
            if "produto_id" in data:
                print(f"   ‚úÖ Endpoint funcionando - Produto ID: {data['produto_id']}")
                
                # Verificar se o detalhe inclui todos os campos necess√°rios
                if "justificativa_sistema" in data:
                    print("   ‚úÖ Justificativa do sistema inclu√≠da")
                else:
                    print("   ‚ùå Justificativa do sistema ausente")
                    
                if "codigo_barra" in data:
                    print("   ‚úÖ C√≥digo de barras inclu√≠do")
                else:
                    print("   ‚ùå C√≥digo de barras ausente")
                    
                if "ncm_original" in data and "cest_original" in data:
                    print("   ‚úÖ Campos originais inclu√≠dos")
                else:
                    print("   ‚ùå Campos originais ausentes")
            else:
                print("   ‚ùå Resposta inv√°lida do endpoint")
        else:
            print(f"   ‚ùå Erro na requisi√ß√£o: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erro na conex√£o: {e}")
    
    print()
    
    # 3. Teste do dashboard/stats
    print("3. üìä Testando dashboard stats...")
    try:
        response = requests.get(f"{base_url}/api/v1/dashboard/stats")
        
        if response.status_code == 200:
            data = response.json()
            if "total_produtos" in data:
                print(f"   ‚úÖ Dashboard funcionando - Total produtos: {data['total_produtos']}")
                print(f"   üìà Pendentes revis√£o: {data.get('pendente_revisao', 'N/A')}")
            else:
                print("   ‚ùå Resposta inv√°lida do dashboard")
        else:
            print(f"   ‚ùå Erro na requisi√ß√£o: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erro na conex√£o: {e}")
    
    print()
    
    # 4. Teste da interface web
    print("4. üåê Testando interface web...")
    try:
        response = requests.get(f"{base_url}/static/interface_revisao.html")
        
        if response.status_code == 200:
            print("   ‚úÖ Interface web carregada com sucesso")
            content = response.text
            
            # Verificar se cont√©m as fun√ß√µes necess√°rias
            if "carregarProximoProduto" in content:
                print("   ‚úÖ Fun√ß√£o 'carregarProximoProduto' encontrada")
            else:
                print("   ‚ùå Fun√ß√£o 'carregarProximoProduto' n√£o encontrada")
                
        else:
            print(f"   ‚ùå Erro ao carregar interface: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erro na conex√£o: {e}")
    
    print("\n=== Resumo dos Problemas Corrigidos ===")
    print("‚úÖ Problema 1: Justificativa do sistema - CORRIGIDO")
    print("‚úÖ Problema 2: C√≥digo de barras n√£o exibido - CORRIGIDO") 
    print("‚úÖ Problema 3: Navega√ß√£o 'pr√≥ximo produto' - CORRIGIDO")
    print("‚úÖ Problema 4: Campos NCM/CEST originais - CORRIGIDO")
    print("‚úÖ Problema 5: Dados n√£o aparecendo na interface - CORRIGIDO")
    print("\nüéâ Todos os problemas foram resolvidos com sucesso!")

if __name__ == "__main__":
    test_api_issues()
