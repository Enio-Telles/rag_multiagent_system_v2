#!/usr/bin/env python3

from src.llm.ollama_client import OllamaClient
import json

llm = OllamaClient()

system_prompt = """Voc√™ √© um especialista em classifica√ß√£o fiscal NCM (Nomenclatura Comum do Mercosul).

Sua tarefa √© analisar um produto e determinar seu c√≥digo NCM correto com base em:
1. CONHECIMENTO ESTRUTURADO: Mapeamento oficial NCM com descri√ß√µes
2. CONHECIMENTO SEM√ÇNTICO: Exemplos similares de produtos j√° classificados

PRINC√çPIOS DE CLASSIFICA√á√ÉO NCM:
- A classifica√ß√£o segue a estrutura por hierarquia de especificidade: Cap√≠tulo (2 d√≠gitos) > Posi√ß√£o (4 d√≠gitos) > Subposi√ß√£o (6 d√≠gitos) > Item (8 d√≠gitos)
- por exemplo: o c√≥digo ncm √© estruturado com 8 d√≠gitos: os primeiros d√≠gitos representam categorias mais abrangentes, enquanto os √∫ltimos produtos mais espec√≠ficos: por exemplo, o c√≥digo 8407.3 abrange os c√≥digos 8407.31, 8407.31.10 e 8407.31.90.
- Priorize sempre a fun√ß√£o principal do produto sobre caracter√≠sticas secund√°rias
- Considere material predominante quando relevante para a classifica√ß√£o
- Use as Regras Gerais Interpretativas (RGI) da nomenclatura

FORMATO DE RESPOSTA:
{
  "ncm_recomendado": "<c√≥digo NCM de 8 d√≠gitos>",
  "confianca": <n√∫mero de 0 a 1>,
  "justificativa": "<explica√ß√£o detalhada da classifica√ß√£o>",
  "ncm_alternativos": [
    {"ncm": "<c√≥digo>", "razao": "<por que poderia ser esta op√ß√£o>"}
  ],
  "fatores_decisivos": ["<fator 1>", "<fator 2>", "..."]
}"""

prompt = """Analise o seguinte produto e determine seu c√≥digo NCM:

PRODUTO PARA CLASSIFICAR:
- Descri√ß√£o Original: CHIP TIM PR√â PLANO NAKED 4G
- Categoria: Componente Eletr√¥nico 
- Material: Sil√≠cio
- Descri√ß√£o Expandida: Chip de processamento pr√©-programado para uso em dispositivos m√≥veis, especificamente para tecnologia de rede 4G.
- Caracter√≠sticas: chip, sil√≠cio, 4G
- Aplica√ß√µes: comunica√ß√£o m√≥vel, tecnologia sem fio
- Palavras-chave: chip, TIM, 4G, m√≥vel

CONHECIMENTO ESTRUTURADO DISPON√çVEL:
Nenhum contexto estruturado espec√≠fico dispon√≠vel.

CONHECIMENTO SEM√ÇNTICO (Exemplos similares):


Forne√ßa sua an√°lise no formato JSON especificado."""

print('üß™ Testing NCM LLM response...')
response = llm.generate(prompt=prompt, system=system_prompt, temperature=0.2)

print(f'Response keys: {response.keys()}')
print(f'Response status: {"SUCCESS" if "error" not in response else "ERROR"}')
print('\n--- RAW RESPONSE ---')
print(response["response"])
print('\n--- PARSING TEST ---')

try:
    parsed = json.loads(response["response"])
    print('‚úÖ JSON parsing: SUCCESS')
    print(f'NCM: {parsed.get("ncm_recomendado")}')
    print(f'Confian√ßa: {parsed.get("confianca")}')
except json.JSONDecodeError as e:
    print(f'‚ùå JSON parsing: FAILED - {e}')
    
    # Try to extract JSON
    raw_response = response["response"]
    start = raw_response.find('{')
    end = raw_response.rfind('}') + 1
    
    if start != -1 and end > start:
        json_part = raw_response[start:end]
        print(f'\nExtracted JSON part:\n{json_part}')
        try:
            parsed = json.loads(json_part)
            print('‚úÖ Extracted JSON parsing: SUCCESS')
            print(f'NCM: {parsed.get("ncm_recomendado")}')
        except json.JSONDecodeError as e2:
            print(f'‚ùå Extracted JSON parsing: FAILED - {e2}')
    else:
        print('‚ùå No JSON structure found in response')
