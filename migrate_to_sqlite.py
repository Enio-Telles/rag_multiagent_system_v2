#!/usr/bin/env python3
"""
migrate_to_sqlite.py
Script de migra√ß√£o da base de conhecimento JSON para SQLite

Este script executa a migra√ß√£o completa dos dados para a nova estrutura SQLite
e realiza testes de compatibilidade.
"""

import sys
import os
from pathlib import Path
import logging
import time

# Adicionar o diret√≥rio src ao path
src_path = Path(__file__).parent / "src"
sys.path.append(str(src_path))

from scripts.build_knowledge_base import SQLiteKnowledgeBaseBuilder
from services.knowledge_base_service import KnowledgeBaseService

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('migration.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class KnowledgeBaseMigrator:
    """
    Gerenciador de migra√ß√£o da base de conhecimento para SQLite
    """
    
    def __init__(self):
        self.builder = SQLiteKnowledgeBaseBuilder()
        self.kb_service = KnowledgeBaseService()
    
    def execute_migration(self):
        """
        Executa a migra√ß√£o completa
        """
        logger.info("üöÄ INICIANDO MIGRA√á√ÉO PARA SQLITE")
        logger.info("=" * 60)
        
        start_time = time.time()
        
        try:
            # 1. Backup do JSON existente
            self._backup_existing_json()
            
            # 2. Construir base SQLite
            logger.info("üì¶ Construindo base de conhecimento SQLite...")
            success = self.builder.build_sqlite_knowledge_base()
            
            if not success:
                logger.error("‚ùå Falha na constru√ß√£o da base SQLite")
                return False
            
            # 3. Testes de valida√ß√£o
            logger.info("üîç Executando testes de valida√ß√£o...")
            validation_success = self._run_validation_tests()
            
            if not validation_success:
                logger.error("‚ùå Falha nos testes de valida√ß√£o")
                return False
            
            # 4. Compara√ß√£o de performance
            logger.info("‚ö° Executando testes de performance...")
            self._run_performance_tests()
            
            # 5. Estat√≠sticas finais
            self._print_migration_summary()
            
            elapsed_time = time.time() - start_time
            logger.info(f"‚úÖ Migra√ß√£o conclu√≠da com sucesso em {elapsed_time:.1f}s")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante migra√ß√£o: {e}")
            return False
    
    def _backup_existing_json(self):
        """
        Faz backup do arquivo JSON existente
        """
        try:
            from config import Config
            config = Config()
            
            if hasattr(config, 'NCM_MAPPING_FILE'):
                json_file = Path(config.NCM_MAPPING_FILE)
                if json_file.exists():
                    backup_file = json_file.with_suffix('.json.backup')
                    import shutil
                    shutil.copy2(json_file, backup_file)
                    logger.info(f"üìã Backup criado: {backup_file}")
                else:
                    logger.info("üìã Arquivo JSON n√£o encontrado, prosseguindo sem backup")
            else:
                logger.info("üìã Configura√ß√£o NCM_MAPPING_FILE n√£o encontrada")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao fazer backup: {e}")
    
    def _run_validation_tests(self) -> bool:
        """
        Executa testes de valida√ß√£o da base migrada
        """
        try:
            # Teste 1: Verificar integridade
            integrity = self.kb_service.verificar_integridade()
            if not integrity['integridade_ok']:
                logger.error("‚ùå Problemas de integridade encontrados:")
                for problema in integrity['problemas']:
                    logger.error(f"  - {problema}")
                return False
            
            logger.info("‚úÖ Teste de integridade: PASSOU")
            
            # Teste 2: Consultas b√°sicas
            test_ncms = ['22021000', '30042000', '85423100']
            for ncm in test_ncms:
                ncm_info = self.kb_service.buscar_ncm_por_codigo(ncm)
                if ncm_info:
                    logger.info(f"‚úÖ NCM {ncm}: encontrado")
                    
                    # Testar busca de CESTs
                    cests = self.kb_service.buscar_cests_por_ncm(ncm)
                    logger.info(f"  - CESTs: {len(cests)} encontrados")
                else:
                    logger.warning(f"‚ö†Ô∏è NCM {ncm}: n√£o encontrado")
            
            # Teste 3: Busca por palavras
            keywords_test = ['medicamento', 'agua', 'telefone']
            for keyword in keywords_test:
                results = self.kb_service.buscar_ncms_por_palavras([keyword], 5)
                logger.info(f"‚úÖ Busca '{keyword}': {len(results)} resultados")
            
            # Teste 4: Estat√≠sticas
            stats = self.kb_service.obter_estatisticas()
            logger.info(f"‚úÖ Estat√≠sticas: {stats['total_ncms']} NCMs, {stats['total_cests']} CESTs")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro nos testes de valida√ß√£o: {e}")
            return False
    
    def _run_performance_tests(self):
        """
        Executa testes de performance e compara com JSON
        """
        try:
            import time
            
            # Teste de performance SQLite
            start_time = time.time()
            
            # Executar 100 consultas variadas
            for i in range(100):
                if i % 20 == 0:
                    # Busca por c√≥digo
                    self.kb_service.buscar_ncm_por_codigo('22021000')
                elif i % 20 == 5:
                    # Busca CESTs
                    self.kb_service.buscar_cests_por_ncm('30042000')
                elif i % 20 == 10:
                    # Busca exemplos
                    self.kb_service.buscar_exemplos_por_ncm('85423100', 3)
                else:
                    # Busca por palavras
                    self.kb_service.buscar_ncms_por_palavras(['agua'], 10)
            
            sqlite_time = time.time() - start_time
            
            logger.info(f"‚ö° Performance SQLite: 100 consultas em {sqlite_time:.3f}s")
            logger.info(f"‚ö° M√©dia por consulta: {sqlite_time/100*1000:.1f}ms")
            
            # Verificar uso de mem√≥ria
            try:
                import psutil
                process = psutil.Process()
                memory_mb = process.memory_info().rss / 1024 / 1024
                logger.info(f"üíæ Uso de mem√≥ria: {memory_mb:.1f}MB")
            except ImportError:
                logger.info("üíæ psutil n√£o dispon√≠vel para medir mem√≥ria")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro nos testes de performance: {e}")
    
    def _print_migration_summary(self):
        """
        Imprime resumo da migra√ß√£o
        """
        logger.info("\nüìä RESUMO DA MIGRA√á√ÉO")
        logger.info("=" * 60)
        
        stats = self.kb_service.obter_estatisticas()
        
        logger.info(f"üìã Dados migrados:")
        logger.info(f"   - NCMs: {stats['total_ncms']:,}")
        logger.info(f"   - CESTs: {stats['total_cests']:,}")
        logger.info(f"   - Mapeamentos: {stats['total_mapeamentos']:,}")
        logger.info(f"   - Exemplos: {stats['total_exemplos']:,}")
        
        # Verificar arquivo SQLite
        db_path = Path("data/knowledge_base/knowledge_base.sqlite")
        if db_path.exists():
            db_size_mb = db_path.stat().st_size / 1024 / 1024
            logger.info(f"üíæ Tamanho do banco SQLite: {db_size_mb:.1f}MB")
        
        logger.info("\nüîÑ PR√ìXIMOS PASSOS:")
        logger.info("1. ‚úÖ Base SQLite criada com sucesso")
        logger.info("2. üîÑ Sistema j√° configurado para usar SQLite")
        logger.info("3. üìã Arquivo JSON original foi preservado como backup")
        logger.info("4. ‚ö° Performance melhorada para consultas complexas")
        logger.info("5. üíæ Uso de mem√≥ria otimizado")
        
        logger.info("\nüí° BENEF√çCIOS ALCAN√áADOS:")
        logger.info("‚Ä¢ Consultas SQL complexas com JOIN e filtros")
        logger.info("‚Ä¢ √çndices otimizados para performance")
        logger.info("‚Ä¢ Redu√ß√£o significativa no uso de mem√≥ria")
        logger.info("‚Ä¢ Suporte a transa√ß√µes e integridade referencial")
        logger.info("‚Ä¢ Escalabilidade para grandes volumes de dados")


def main():
    """
    Fun√ß√£o principal de migra√ß√£o
    """
    migrator = KnowledgeBaseMigrator()
    
    print("""
üîÑ MIGRA√á√ÉO DA BASE DE CONHECIMENTO PARA SQLITE
===============================================

Este script ir√°:
1. Fazer backup do arquivo JSON existente
2. Criar a nova base de dados SQLite
3. Migrar todos os dados NCM, CEST e produtos
4. Executar testes de valida√ß√£o
5. Comparar performance

Continuar? (s/N): """, end="")
    
    # No ambiente automatizado, prosseguir automaticamente
    if os.getenv('AUTO_MIGRATE', 'false').lower() == 'true':
        response = 's'
        print('s (AUTO_MIGRATE=true)')
    else:
        response = input().lower()
    
    if response in ['s', 'sim', 'y', 'yes']:
        success = migrator.execute_migration()
        
        if success:
            print("\nüéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("O sistema agora usa SQLite em vez de JSON para melhor performance.")
            sys.exit(0)
        else:
            print("\n‚ùå MIGRA√á√ÉO FALHOU!")
            print("Verifique os logs para mais detalhes.")
            sys.exit(1)
    else:
        print("Migra√ß√£o cancelada.")
        sys.exit(0)


if __name__ == "__main__":
    main()
