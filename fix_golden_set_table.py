#!/usr/bin/env python3
"""
Script para corrigir a estrutura da tabela golden_set no PostgreSQL.
Adiciona a coluna 'descricao_completa' que est√° faltando.
"""

import os
import sys
import psycopg2
from psycopg2 import sql
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)

def get_db_connection():
    """Conecta com o banco PostgreSQL usando as credenciais do ambiente."""
    try:
        # Configura√ß√µes do banco (ajuste conforme seu ambiente)
        connection = psycopg2.connect(
            host="localhost",
            port="5432", 
            database="db_04565289005297",
            user="postgres",
            password="sefin"
        )
        return connection
    except Exception as e:
        logger.error(f"Erro ao conectar com banco: {e}")
        return None

def fix_golden_set_table():
    """Adiciona a coluna descricao_completa √† tabela golden_set se ela n√£o existir."""
    
    connection = get_db_connection()
    if not connection:
        logger.error("‚ùå N√£o foi poss√≠vel conectar com o banco de dados")
        return False
    
    try:
        cursor = connection.cursor()
        
        logger.info("üîç Verificando estrutura atual da tabela golden_set...")
        
        # Verificar se a coluna j√° existe
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'golden_set' 
            AND column_name = 'descricao_completa'
        """)
        
        existing_column = cursor.fetchone()
        
        if existing_column:
            logger.info("‚úÖ Coluna 'descricao_completa' j√° existe na tabela golden_set")
            return True
        
        logger.info("‚ö° Adicionando coluna 'descricao_completa' √† tabela golden_set...")
        
        # Adicionar a coluna que est√° faltando
        cursor.execute("""
            ALTER TABLE golden_set 
            ADD COLUMN descricao_completa TEXT
        """)
        
        # Confirmar mudan√ßas
        connection.commit()
        logger.info("‚úÖ Coluna 'descricao_completa' adicionada com sucesso!")
        
        # Verificar a estrutura atualizada
        logger.info("üîç Verificando estrutura atualizada...")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'golden_set'
            AND column_name IN ('descricao_produto', 'descricao_completa')
            ORDER BY ordinal_position
        """)
        
        results = cursor.fetchall()
        logger.info("üìä Colunas de descri√ß√£o na tabela golden_set:")
        for row in results:
            logger.info(f"   {row[0]}: {row[1]} (nullable: {row[2]})")
        
        cursor.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro durante altera√ß√£o: {e}")
        connection.rollback()
        return False
    finally:
        connection.close()

def main():
    """Fun√ß√£o principal."""
    logger.info("üöÄ Script de Corre√ß√£o - Tabela golden_set no PostgreSQL")
    logger.info("=" * 60)
    
    logger.info("üéØ Problema: Coluna 'descricao_completa' n√£o existe na tabela golden_set")
    logger.info("üîß Solu√ß√£o: Adicionar coluna TEXT para descri√ß√µes completas")
    logger.info("")
    
    success = fix_golden_set_table()
    
    if success:
        logger.info("‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!")
        logger.info("üí° Agora voc√™ pode executar novamente:")
        logger.info("   python src/main.py setup-review --start-api")
        logger.info("")
        logger.info("üåê URLs dispon√≠veis:")
        logger.info("   üìä Dashboard: http://localhost:8000/api/v1/dashboard/stats")
        logger.info("   üéØ Interface: http://localhost:8000/static/interface_revisao.html")
    else:
        logger.error("‚ùå ERRO na aplica√ß√£o da corre√ß√£o")
        logger.error("üí° Verifique as credenciais do banco de dados")

if __name__ == "__main__":
    main()
