#!/usr/bin/env python3
"""
Script de Valida√ß√£o do Sistema SQLite Unificado
Verifica se todas as funcionalidades est√£o operacionais ap√≥s atualiza√ß√µes
"""

import os
import sys
import json
import time
import requests
import subprocess
from pathlib import Path
from datetime import datetime

# Adicionar src ao path
sys.path.append('src')

def print_header(title):
    """Imprime cabe√ßalho formatado"""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def check_files():
    """Verifica arquivos essenciais"""
    print_header("VERIFICA√á√ÉO DE ARQUIVOS")
    
    required_files = [
        ("data/unified_rag_system.db", "Banco SQLite Unificado"),
        ("src/services/unified_sqlite_service.py", "Servi√ßo SQLite Unificado"),
        ("src/api/api_unified.py", "API Principal Unificada"),
        ("src/api/review_api_unified.py", "API de Revis√£o Unificada"),
        ("src/main.py", "Main Atualizado"),
        ("start_unified_system.py", "Sistema de Inicializa√ß√£o"),
        ("test_sqlite_simple.py", "Teste de Valida√ß√£o")
    ]
    
    all_ok = True
    for file_path, description in required_files:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            if file_path.endswith('.db'):
                size_mb = size / (1024*1024)
                print(f"‚úÖ {description}: {size_mb:.1f}MB")
            else:
                print(f"‚úÖ {description}: {size:,} bytes")
        else:
            print(f"‚ùå {description}: FALTANDO - {file_path}")
            all_ok = False
    
    return all_ok

def test_unified_service():
    """Testa servi√ßo SQLite unificado"""
    print_header("TESTE DO SERVI√áO SQLITE UNIFICADO")
    
    try:
        from services.unified_sqlite_service import get_unified_service
        
        service = get_unified_service()
        
        # Testar estat√≠sticas
        stats = service.get_dashboard_stats()
        
        print(f"üìä Estat√≠sticas do Sistema:")
        print(f"   NCMs: {stats['total_ncms']:,}")
        print(f"   CESTs: {stats['total_cests']:,}")
        print(f"   Mapeamentos: {stats.get('total_mapeamentos', 0):,}")
        print(f"   Classifica√ß√µes: {stats['total_classificacoes']:,}")
        
        # Testar busca NCM
        ncm_result = service.buscar_ncm("8517")
        if ncm_result:
            print(f"‚úÖ Busca NCM: {ncm_result['codigo']} - {ncm_result['descricao'][:50]}...")
        else:
            print(f"‚ùå Busca NCM falhou")
            return False
        
        # Testar busca CEST
        cests = service.buscar_cests_para_ncm("8517")
        if cests:
            print(f"‚úÖ Busca CEST: {len(cests)} CESTs encontrados para NCM 8517")
        else:
            print(f"‚ö†Ô∏è  Nenhum CEST encontrado para NCM 8517 (pode ser normal)")
        
        print(f"‚úÖ Servi√ßo SQLite funcionando corretamente!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no servi√ßo: {e}")
        return False

def test_main_classify():
    """Testa comando principal de classifica√ß√£o"""
    print_header("TESTE DO COMANDO CLASSIFY")
    
    try:
        # Testar importa√ß√£o
        from main import _classify_produto_unified, _get_sample_produtos
        from services.unified_sqlite_service import get_unified_service
        
        service = get_unified_service()
        produtos_teste = _get_sample_produtos(2)
        
        print(f"üìù Testando classifica√ß√£o de {len(produtos_teste)} produtos...")
        
        for i, produto in enumerate(produtos_teste, 1):
            start_time = time.time()
            
            resultado = _classify_produto_unified(produto, service)
            
            tempo_ms = int((time.time() - start_time) * 1000)
            
            print(f"   {i}. {produto['descricao_produto'][:40]}...")
            print(f"      NCM: {resultado['ncm_sugerido']}")
            print(f"      CEST: {resultado.get('cest_sugerido', 'N/A')}")
            print(f"      Confian√ßa: {resultado.get('confianca_sugerida', 0):.2f}")
            print(f"      Tempo: {tempo_ms}ms")
        
        print(f"‚úÖ Comando classify funcionando!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no comando classify: {e}")
        return False

def test_command_execution():
    """Testa execu√ß√£o de comandos via terminal"""
    print_header("TESTE DE COMANDOS VIA TERMINAL")
    
    try:
        # Testar comando principal
        print("üß™ Testando: python src/main.py classify --limit 2")
        
        result = subprocess.run([
            "python", "src/main.py", "classify", "--limit", "2"
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ Comando executado com sucesso!")
            # Verificar se gerou arquivo de sa√≠da
            output_files = list(Path(".").glob("resultados_classificacao_*.json"))
            if output_files:
                latest_file = max(output_files, key=os.path.getctime)
                print(f"   üìÅ Arquivo gerado: {latest_file}")
            return True
        else:
            print(f"‚ùå Comando falhou: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Comando demorou muito para executar")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao executar comando: {e}")
        return False

def test_api_availability():
    """Testa se APIs est√£o funcionando"""
    print_header("TESTE DE DISPONIBILIDADE DAS APIS")
    
    # Verificar se h√° processos rodando nas portas
    try:
        # Testar API principal
        response = requests.get("http://localhost:8000/api/v1/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API Principal (8000): Online")
            api_main = True
        else:
            print("‚ö†Ô∏è  API Principal (8000): Offline")
            api_main = False
    except:
        print("‚ö†Ô∏è  API Principal (8000): Offline")
        api_main = False
    
    try:
        # Testar API de revis√£o
        response = requests.get("http://localhost:8001/api/v1/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API Revis√£o (8001): Online")
            api_review = True
        else:
            print("‚ö†Ô∏è  API Revis√£o (8001): Offline")
            api_review = False
    except:
        print("‚ö†Ô∏è  API Revis√£o (8001): Offline")
        api_review = False
    
    if not api_main and not api_review:
        print("üí° Para iniciar APIs: python start_unified_system.py")
    
    return api_main or api_review

def run_complete_validation():
    """Executa valida√ß√£o completa"""
    print("üöÄ VALIDA√á√ÉO COMPLETA DO SISTEMA SQLITE UNIFICADO")
    print(f"üìÖ Data: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    results = {
        'files': check_files(),
        'service': test_unified_service(),
        'classify': test_main_classify(),
        'commands': test_command_execution(),
        'apis': test_api_availability()
    }
    
    # Relat√≥rio final
    print_header("RELAT√ìRIO FINAL")
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    print(f"üìä Resultados:")
    for test_name, result in results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"   {test_name.upper()}: {status}")
    
    print(f"\nüéØ Score: {passed_tests}/{total_tests} ({passed_tests/total_tests*100:.1f}%)")
    
    if passed_tests == total_tests:
        print("üéâ SISTEMA VALIDADO COM SUCESSO!")
        print("   Sistema SQLite unificado est√° 100% operacional")
        return 0
    elif passed_tests >= total_tests * 0.8:  # 80% dos testes
        print("‚ö†Ô∏è  SISTEMA PARCIALMENTE VALIDADO")
        print("   Funcionalidades principais est√£o operacionais")
        return 0
    else:
        print("‚ùå SISTEMA COM PROBLEMAS")
        print("   Verifique os erros e execute corre√ß√µes necess√°rias")
        return 1

if __name__ == "__main__":
    try:
        exit_code = run_complete_validation()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚è∏Ô∏è  Valida√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• Erro inesperado: {e}")
        sys.exit(1)
