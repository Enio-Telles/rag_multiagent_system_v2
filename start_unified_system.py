#!/usr/bin/env python3
"""
Script de Inicializa√ß√£o do Sistema Unificado
Inicia as APIs integradas com SQLite unificado
"""

import sys
import subprocess
import time
import signal
import os
from pathlib import Path
from datetime import datetime

def check_dependencies():
    """Verifica depend√™ncias necess√°rias"""
    print("üîç Verificando depend√™ncias...")
    
    # Verificar arquivos principais
    required_files = [
        "data/unified_rag_system.db",
        "src/services/unified_sqlite_service.py",
        "src/api/api_unified.py", 
        "src/api/review_api_unified.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå Arquivos necess√°rios n√£o encontrados:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        print("\nüí° Execute primeiro: python src/main_unified.py migrate")
        return False
    
    # Verificar tamanho do banco
    db_path = Path("data/unified_rag_system.db")
    db_size = db_path.stat().st_size
    print(f"‚úÖ Banco SQLite: {db_size / (1024*1024):.1f} MB")
    
    # Testar conex√£o com banco
    try:
        sys.path.append('src')
        from services.unified_sqlite_service import get_unified_service
        
        service = get_unified_service(str(db_path))
        counts = service.contar_registros()
        total_registros = sum(counts.values())
        
        print(f"‚úÖ Registros no banco: {total_registros:,}")
        print(f"   - NCMs: {counts.get('ncm_estruturado', 0):,}")
        print(f"   - CESTs: {counts.get('cest_estruturado', 0):,}")
        print(f"   - Classifica√ß√µes: {counts.get('classificacao', 0):,}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar com banco: {e}")
        return False

def start_unified_api():
    """Inicia API principal unificada"""
    print("\nüöÄ Iniciando API Principal Unificada (porta 8000)...")
    
    try:
        process = subprocess.Popen([
            sys.executable, "-m", "uvicorn",
            "src.api.api_unified:app",
            "--host", "0.0.0.0",
            "--port", "8000",
            "--reload",
            "--log-level", "info"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        return process
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar API principal: {e}")
        return None

def start_review_api():
    """Inicia API de revis√£o"""
    print("üöÄ Iniciando Interface de Revis√£o (porta 8001)...")
    
    try:
        process = subprocess.Popen([
            sys.executable, "-m", "uvicorn", 
            "src.api.review_api_unified:app",
            "--host", "0.0.0.0",
            "--port", "8001", 
            "--reload",
            "--log-level", "info"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        return process
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar interface de revis√£o: {e}")
        return None

def wait_for_api_ready(port, max_wait=30):
    """Aguarda API ficar dispon√≠vel"""
    import requests
    
    url = f"http://localhost:{port}/api/health"
    if port == 8000:
        url = f"http://localhost:{port}/api/v1/sistema/health"
    
    print(f"‚è≥ Aguardando API na porta {port}...")
    
    for i in range(max_wait):
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ API porta {port} pronta!")
                return True
        except:
            pass
        
        time.sleep(1)
        if i % 5 == 0 and i > 0:
            print(f"   ... ainda aguardando ({i}s)")
    
    print(f"‚ùå API porta {port} n√£o ficou dispon√≠vel em {max_wait}s")
    return False

def print_urls():
    """Imprime URLs importantes"""
    print("\nüåê URLs DO SISTEMA:")
    print("=" * 50)
    print("üìä API Principal:")
    print("   - Documenta√ß√£o: http://localhost:8000/api/docs")
    print("   - Health Check: http://localhost:8000/api/v1/sistema/health")
    print("   - Dashboard:    http://localhost:8000/api/v1/dashboard/stats")
    print()
    print("üìã Interface de Revis√£o:")
    print("   - Interface:    http://localhost:8001")
    print("   - Documenta√ß√£o: http://localhost:8001/api/docs") 
    print("   - Health Check: http://localhost:8001/api/health")
    print()
    print("üîç Endpoints Principais:")
    print("   - Buscar NCMs:   GET  /api/v1/ncm/buscar")
    print("   - Classificar:   POST /api/v1/classificar")
    print("   - Pendentes:     GET  /api/classificacoes/pendentes")
    print("   - Revisar:       POST /api/classificacoes/{id}/revisar")

def handle_shutdown(processes):
    """Manipula encerramento do sistema"""
    
    def signal_handler(sig, frame):
        print("\nüõë Encerrando sistema...")
        
        for name, process in processes.items():
            if process and process.poll() is None:
                print(f"   - Parando {name}...")
                process.terminate()
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    print(f"   - For√ßando parada de {name}...")
                    process.kill()
        
        print("‚úÖ Sistema encerrado")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

def main():
    """Fun√ß√£o principal"""
    print("üöÄ SISTEMA DE CLASSIFICA√á√ÉO FISCAL - INICIALIZA√á√ÉO UNIFICADA")
    print("=" * 70)
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Verificar depend√™ncias
    if not check_dependencies():
        print("\n‚ùå Depend√™ncias n√£o atendidas. Sistema n√£o iniciado.")
        return 1
    
    # Iniciar processos
    processes = {}
    
    # API Principal
    api_process = start_unified_api()
    if api_process:
        processes['API Principal'] = api_process
    else:
        print("‚ùå Falha ao iniciar API principal")
        return 1
    
    # Interface de Revis√£o
    review_process = start_review_api()
    if review_process:
        processes['Interface Revis√£o'] = review_process
    else:
        print("‚ùå Falha ao iniciar interface de revis√£o")
        return 1
    
    # Configurar manipulador de encerramento
    handle_shutdown(processes)
    
    # Aguardar APIs ficarem prontas
    print("\n‚è≥ Aguardando inicializa√ß√£o...")
    time.sleep(3)  # Dar tempo para iniciar
    
    api_ready = wait_for_api_ready(8000)
    review_ready = wait_for_api_ready(8001)
    
    if not (api_ready and review_ready):
        print("\n‚ùå Nem todas as APIs ficaram dispon√≠veis")
        handle_shutdown(processes)
        return 1
    
    # Imprimir informa√ß√µes
    print_urls()
    
    print("\nüéâ SISTEMA INICIADO COM SUCESSO!")
    print("=" * 50)
    print("üí° Pressione Ctrl+C para encerrar")
    print()
    
    # Manter processos rodando
    try:
        while True:
            # Verificar se processos ainda est√£o rodando
            for name, process in processes.items():
                if process.poll() is not None:
                    print(f"‚ùå {name} parou inesperadamente")
                    return 1
            
            time.sleep(5)
            
    except KeyboardInterrupt:
        handle_shutdown(processes)
    
    return 0

if __name__ == "__main__":
    # Mudar para diret√≥rio do script
    os.chdir(Path(__file__).parent)
    
    sys.exit(main())
